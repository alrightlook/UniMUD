/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class NameTable : IMudTable
    {
        public class NameTableUpdate : RecordUpdate
        {
            public string? key;
            public string? Previouskey;
            public bool? named;
            public bool? Previousnamed;
            public uint? first;
            public uint? Previousfirst;
            public uint? middle;
            public uint? Previousmiddle;
            public uint? last;
            public uint? Previouslast;
        }

        public readonly static string ID = "Name";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? key;
        public bool? named;
        public uint? first;
        public uint? middle;
        public uint? last;

        public override Type TableType()
        {
            return typeof(NameTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(NameTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            NameTable other = (NameTable)obj;

            if (other == null)
            {
                return false;
            }
            if (key != other.key)
            {
                return false;
            }
            if (named != other.named)
            {
                return false;
            }
            if (first != other.first)
            {
                return false;
            }
            if (middle != other.middle)
            {
                return false;
            }
            if (last != other.last)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            key = (string)functionParameters[0];

            named = (bool)functionParameters[1];

            first = (uint)functionParameters[2];

            middle = (uint)functionParameters[3];

            last = (uint)functionParameters[4];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new NameTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                key = (string)(currentValue?["key"] ?? null),
                named = (bool)(currentValue?["named"] ?? null),
                first = (uint)(int)(currentValue?["first"] ?? null),
                middle = (uint)(int)(currentValue?["middle"] ?? null),
                last = (uint)(int)(currentValue?["last"] ?? null),
                Previouskey = (string)(previousValue?["key"] ?? null),
                Previousnamed = (bool)(previousValue?["named"] ?? null),
                Previousfirst = (uint)(int)(previousValue?["first"] ?? null),
                Previousmiddle = (uint)(int)(previousValue?["middle"] ?? null),
                Previouslast = (uint)(int)(previousValue?["last"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var keyValue = (string)table["key"];
            key = keyValue;
            var namedValue = (bool)table["named"];
            named = namedValue;
            var firstValue = (uint)table["first"];
            first = firstValue;
            var middleValue = (uint)table["middle"];
            middle = middleValue;
            var lastValue = (uint)table["last"];
            last = lastValue;
        }
    }
}
