/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class MapConfigTable : IMudTable
    {
        public class MapConfigTableUpdate : RecordUpdate
        {
            public int? playWidth;
            public int? PreviousplayWidth;
            public int? playHeight;
            public int? PreviousplayHeight;
            public int? playSpawnWidth;
            public int? PreviousplaySpawnWidth;
        }

        public readonly static string ID = "MapConfig";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public int? playWidth;
        public int? playHeight;
        public int? playSpawnWidth;

        public override Type TableType()
        {
            return typeof(MapConfigTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(MapConfigTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            MapConfigTable other = (MapConfigTable)obj;

            if (other == null)
            {
                return false;
            }
            if (playWidth != other.playWidth)
            {
                return false;
            }
            if (playHeight != other.playHeight)
            {
                return false;
            }
            if (playSpawnWidth != other.playSpawnWidth)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            playWidth = (int)functionParameters[0];

            playHeight = (int)functionParameters[1];

            playSpawnWidth = (int)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new MapConfigTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                playWidth = (int)(currentValue?["playwidth"] ?? null),
                playHeight = (int)(currentValue?["playheight"] ?? null),
                playSpawnWidth = (int)(currentValue?["playspawnwidth"] ?? null),
                PreviousplayWidth = (int)(previousValue?["playwidth"] ?? null),
                PreviousplayHeight = (int)(previousValue?["playheight"] ?? null),
                PreviousplaySpawnWidth = (int)(previousValue?["playspawnwidth"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var playWidthValue = (int)table["playWidth"];
            playWidth = playWidthValue;
            var playHeightValue = (int)table["playHeight"];
            playHeight = playHeightValue;
            var playSpawnWidthValue = (int)table["playSpawnWidth"];
            playSpawnWidth = playSpawnWidthValue;
        }
    }
}
