/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class BoundsTable : IMudTable
    {
        public class BoundsTableUpdate : RecordUpdate
        {
            public int? left;
            public int? Previousleft;
            public int? right;
            public int? Previousright;
            public int? up;
            public int? Previousup;
            public int? down;
            public int? Previousdown;
        }

        public readonly static string ID = "Bounds";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public int? left;
        public int? right;
        public int? up;
        public int? down;

        public override Type TableType()
        {
            return typeof(BoundsTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(BoundsTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            BoundsTable other = (BoundsTable)obj;

            if (other == null)
            {
                return false;
            }
            if (left != other.left)
            {
                return false;
            }
            if (right != other.right)
            {
                return false;
            }
            if (up != other.up)
            {
                return false;
            }
            if (down != other.down)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            left = (int)functionParameters[0];

            right = (int)functionParameters[1];

            up = (int)functionParameters[2];

            down = (int)functionParameters[3];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new BoundsTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                left = (int)(currentValue?["left"] ?? null),
                right = (int)(currentValue?["right"] ?? null),
                up = (int)(currentValue?["up"] ?? null),
                down = (int)(currentValue?["down"] ?? null),
                Previousleft = (int)(previousValue?["left"] ?? null),
                Previousright = (int)(previousValue?["right"] ?? null),
                Previousup = (int)(previousValue?["up"] ?? null),
                Previousdown = (int)(previousValue?["down"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var leftValue = (int)table["left"];
            left = leftValue;
            var rightValue = (int)table["right"];
            right = rightValue;
            var upValue = (int)table["up"];
            up = upValue;
            var downValue = (int)table["down"];
            down = downValue;
        }
    }
}
