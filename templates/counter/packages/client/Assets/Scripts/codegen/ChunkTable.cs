/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class ChunkTable : IMudTable
    {
        public class ChunkTableUpdate : RecordUpdate
        {
            public string? key;
            public string? Previouskey;
            public int? mile;
            public int? Previousmile;
            public bool? spawned;
            public bool? Previousspawned;
            public bool? completed;
            public bool? Previouscompleted;
            public uint? roads;
            public uint? Previousroads;
            public System.Numerics.BigInteger? blockCompleted;
            public System.Numerics.BigInteger? PreviousblockCompleted;
        }

        public readonly static string ID = "Chunk";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? key;
        public int? mile;
        public bool? spawned;
        public bool? completed;
        public uint? roads;
        public System.Numerics.BigInteger? blockCompleted;

        public override Type TableType()
        {
            return typeof(ChunkTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(ChunkTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            ChunkTable other = (ChunkTable)obj;

            if (other == null)
            {
                return false;
            }
            if (key != other.key)
            {
                return false;
            }
            if (mile != other.mile)
            {
                return false;
            }
            if (spawned != other.spawned)
            {
                return false;
            }
            if (completed != other.completed)
            {
                return false;
            }
            if (roads != other.roads)
            {
                return false;
            }
            if (blockCompleted != other.blockCompleted)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            key = (string)functionParameters[0];

            mile = (int)functionParameters[1];

            spawned = (bool)functionParameters[2];

            completed = (bool)functionParameters[3];

            roads = (uint)functionParameters[4];

            blockCompleted = (System.Numerics.BigInteger)functionParameters[5];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new ChunkTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                key = (string)(currentValue?["key"] ?? null),
                mile = (int)(currentValue?["mile"] ?? null),
                spawned = (bool)(currentValue?["spawned"] ?? null),
                completed = (bool)(currentValue?["completed"] ?? null),
                roads = (uint)(int)(currentValue?["roads"] ?? null),
                blockCompleted = (System.Numerics.BigInteger)(
                    currentValue?["blockcompleted"] ?? null
                ),
                Previouskey = (string)(previousValue?["key"] ?? null),
                Previousmile = (int)(previousValue?["mile"] ?? null),
                Previousspawned = (bool)(previousValue?["spawned"] ?? null),
                Previouscompleted = (bool)(previousValue?["completed"] ?? null),
                Previousroads = (uint)(int)(previousValue?["roads"] ?? null),
                PreviousblockCompleted = (System.Numerics.BigInteger)(
                    previousValue?["blockcompleted"] ?? null
                ),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var keyValue = (string)table["key"];
            key = keyValue;
            var mileValue = (int)table["mile"];
            mile = mileValue;
            var spawnedValue = (bool)table["spawned"];
            spawned = spawnedValue;
            var completedValue = (bool)table["completed"];
            completed = completedValue;
            var roadsValue = (uint)table["roads"];
            roads = roadsValue;
            var blockCompletedValue = (System.Numerics.BigInteger)table["blockCompleted"];
            blockCompleted = blockCompletedValue;
        }
    }
}
