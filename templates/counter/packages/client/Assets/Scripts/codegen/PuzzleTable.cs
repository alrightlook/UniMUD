/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class PuzzleTable : IMudTable
    {
        public class PuzzleTableUpdate : RecordUpdate
        {
            public string? key;
            public string? Previouskey;
            public uint? puzzleType;
            public uint? PreviouspuzzleType;
            public bool? complete;
            public bool? Previouscomplete;
        }

        public readonly static string ID = "Puzzle";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? key;
        public uint? puzzleType;
        public bool? complete;

        public override Type TableType()
        {
            return typeof(PuzzleTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PuzzleTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            PuzzleTable other = (PuzzleTable)obj;

            if (other == null)
            {
                return false;
            }
            if (key != other.key)
            {
                return false;
            }
            if (puzzleType != other.puzzleType)
            {
                return false;
            }
            if (complete != other.complete)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            key = (string)functionParameters[0];

            puzzleType = (uint)functionParameters[1];

            complete = (bool)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new PuzzleTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                key = (string)(currentValue?["key"] ?? null),
                puzzleType = (uint)(int)(currentValue?["puzzletype"] ?? null),
                complete = (bool)(currentValue?["complete"] ?? null),
                Previouskey = (string)(previousValue?["key"] ?? null),
                PreviouspuzzleType = (uint)(int)(previousValue?["puzzletype"] ?? null),
                Previouscomplete = (bool)(previousValue?["complete"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var keyValue = (string)table["key"];
            key = keyValue;
            var puzzleTypeValue = (uint)table["puzzleType"];
            puzzleType = puzzleTypeValue;
            var completeValue = (bool)table["complete"];
            complete = completeValue;
        }
    }
}
