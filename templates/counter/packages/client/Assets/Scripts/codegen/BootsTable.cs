/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class BootsTable : IMudTable
    {
        public class BootsTableUpdate : RecordUpdate
        {
            public string? key;
            public string? Previouskey;
            public int? minMove;
            public int? PreviousminMove;
            public int? maxMove;
            public int? PreviousmaxMove;
        }

        public readonly static string ID = "Boots";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? key;
        public int? minMove;
        public int? maxMove;

        public override Type TableType()
        {
            return typeof(BootsTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(BootsTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            BootsTable other = (BootsTable)obj;

            if (other == null)
            {
                return false;
            }
            if (key != other.key)
            {
                return false;
            }
            if (minMove != other.minMove)
            {
                return false;
            }
            if (maxMove != other.maxMove)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            key = (string)functionParameters[0];

            minMove = (int)functionParameters[1];

            maxMove = (int)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new BootsTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                key = (string)(currentValue?["key"] ?? null),
                minMove = (int)(currentValue?["minmove"] ?? null),
                maxMove = (int)(currentValue?["maxmove"] ?? null),
                Previouskey = (string)(previousValue?["key"] ?? null),
                PreviousminMove = (int)(previousValue?["minmove"] ?? null),
                PreviousmaxMove = (int)(previousValue?["maxmove"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var keyValue = (string)table["key"];
            key = keyValue;
            var minMoveValue = (int)table["minMove"];
            minMove = minMoveValue;
            var maxMoveValue = (int)table["maxMove"];
            maxMove = maxMoveValue;
        }
    }
}
