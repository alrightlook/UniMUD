/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class RoadConfigTable : IMudTable
    {
        public class RoadConfigTableUpdate : RecordUpdate
        {
            public uint? width;
            public uint? Previouswidth;
            public int? left;
            public int? Previousleft;
            public int? right;
            public int? Previousright;
        }

        public readonly static string ID = "RoadConfig";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public uint? width;
        public int? left;
        public int? right;

        public override Type TableType()
        {
            return typeof(RoadConfigTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(RoadConfigTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            RoadConfigTable other = (RoadConfigTable)obj;

            if (other == null)
            {
                return false;
            }
            if (width != other.width)
            {
                return false;
            }
            if (left != other.left)
            {
                return false;
            }
            if (right != other.right)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            width = (uint)functionParameters[0];

            left = (int)functionParameters[1];

            right = (int)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new RoadConfigTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                width = (uint)(int)(currentValue?["width"] ?? null),
                left = (int)(currentValue?["left"] ?? null),
                right = (int)(currentValue?["right"] ?? null),
                Previouswidth = (uint)(int)(previousValue?["width"] ?? null),
                Previousleft = (int)(previousValue?["left"] ?? null),
                Previousright = (int)(previousValue?["right"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var widthValue = (uint)table["width"];
            width = widthValue;
            var leftValue = (int)table["left"];
            left = leftValue;
            var rightValue = (int)table["right"];
            right = rightValue;
        }
    }
}
