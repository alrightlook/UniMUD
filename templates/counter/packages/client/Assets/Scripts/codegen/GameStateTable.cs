/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class GameStateTable : IMudTable
    {
        public class GameStateTableUpdate : RecordUpdate
        {
            public int? miles;
            public int? Previousmiles;
            public int? unused;
            public int? Previousunused;
        }

        public readonly static string ID = "GameState";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public int? miles;
        public int? unused;

        public override Type TableType()
        {
            return typeof(GameStateTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(GameStateTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            GameStateTable other = (GameStateTable)obj;

            if (other == null)
            {
                return false;
            }
            if (miles != other.miles)
            {
                return false;
            }
            if (unused != other.unused)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            miles = (int)functionParameters[0];

            unused = (int)functionParameters[1];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new GameStateTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                miles = (int)(currentValue?["miles"] ?? null),
                unused = (int)(currentValue?["unused"] ?? null),
                Previousmiles = (int)(previousValue?["miles"] ?? null),
                Previousunused = (int)(previousValue?["unused"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var milesValue = (int)table["miles"];
            miles = milesValue;
            var unusedValue = (int)table["unused"];
            unused = unusedValue;
        }
    }
}
