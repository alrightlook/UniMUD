/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class GameConfigTable : IMudTable
    {
        public class GameConfigTableUpdate : RecordUpdate
        {
            public bool? debug;
            public bool? Previousdebug;
            public bool? dummyPlayers;
            public bool? PreviousdummyPlayers;
            public bool? roadComplete;
            public bool? PreviousroadComplete;
        }

        public readonly static string ID = "GameConfig";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public bool? debug;
        public bool? dummyPlayers;
        public bool? roadComplete;

        public override Type TableType()
        {
            return typeof(GameConfigTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(GameConfigTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            GameConfigTable other = (GameConfigTable)obj;

            if (other == null)
            {
                return false;
            }
            if (debug != other.debug)
            {
                return false;
            }
            if (dummyPlayers != other.dummyPlayers)
            {
                return false;
            }
            if (roadComplete != other.roadComplete)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            debug = (bool)functionParameters[0];

            dummyPlayers = (bool)functionParameters[1];

            roadComplete = (bool)functionParameters[2];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new GameConfigTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                debug = (bool)(currentValue?["debug"] ?? null),
                dummyPlayers = (bool)(currentValue?["dummyplayers"] ?? null),
                roadComplete = (bool)(currentValue?["roadcomplete"] ?? null),
                Previousdebug = (bool)(previousValue?["debug"] ?? null),
                PreviousdummyPlayers = (bool)(previousValue?["dummyplayers"] ?? null),
                PreviousroadComplete = (bool)(previousValue?["roadcomplete"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var debugValue = (bool)table["debug"];
            debug = debugValue;
            var dummyPlayersValue = (bool)table["dummyPlayers"];
            dummyPlayers = dummyPlayersValue;
            var roadCompleteValue = (bool)table["roadComplete"];
            roadComplete = roadCompleteValue;
        }
    }
}
