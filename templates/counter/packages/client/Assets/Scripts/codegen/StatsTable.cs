/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class StatsTable : IMudTable
    {
        public class StatsTableUpdate : RecordUpdate
        {
            public string? key;
            public string? Previouskey;
            public int? startingMile;
            public int? PreviousstartingMile;
        }

        public readonly static string ID = "Stats";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? key;
        public int? startingMile;

        public override Type TableType()
        {
            return typeof(StatsTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(StatsTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            StatsTable other = (StatsTable)obj;

            if (other == null)
            {
                return false;
            }
            if (key != other.key)
            {
                return false;
            }
            if (startingMile != other.startingMile)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            key = (string)functionParameters[0];

            startingMile = (int)functionParameters[1];
        }

        public static IObservable<RecordUpdate> GetUpdates<T>()
            where T : IMudTable, new()
        {
            IMudTable mudTable = (IMudTable)Activator.CreateInstance(typeof(T));

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentValue as Property;
            var previousValue = recordUpdate.PreviousValue as Property;

            return new StatsTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentValue = recordUpdate.CurrentValue,
                PreviousValue = recordUpdate.PreviousValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                key = (string)(currentValue?["key"] ?? null),
                startingMile = (int)(currentValue?["startingmile"] ?? null),
                Previouskey = (string)(previousValue?["key"] ?? null),
                PreviousstartingMile = (int)(previousValue?["startingmile"] ?? null),
            };
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var keyValue = (string)table["key"];
            key = keyValue;
            var startingMileValue = (int)table["startingMile"];
            startingMile = startingMileValue;
        }
    }
}
