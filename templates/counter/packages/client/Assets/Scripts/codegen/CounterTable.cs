/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace DefaultNamespace
{
    public class CounterTable : IMudTable
    {
        public class CounterTableUpdate : RecordUpdate
        {
            public uint? Value;
            public uint? PreviousValue;
        }

        public readonly static string ID = "Counter";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public uint? Value;

        public override Type TableType()
        {
            return typeof(CounterTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(CounterTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            CounterTable other = (CounterTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Value != other.Value)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Value = (uint)functionParameters[0];
        }

        public static IObservable<CounterTableUpdate> GetUpdates()
        {
            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    var currentValue = recordUpdate.CurrentValue as Property;
                    var previousValue = recordUpdate.PreviousValue as Property;
                    return new CounterTableUpdate
                    {
                        Table = recordUpdate.Table,
                        CurrentKey = recordUpdate.CurrentKey,
                        PreviousKey = recordUpdate.PreviousKey,
                        Type = recordUpdate.Type,
                        Value = (uint)(int)(currentValue?["value"] ?? null),
                        PreviousValue = (uint)(int)(previousValue?["value"] ?? null),
                    };
                });
        }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.RawValue;

            var ValueValue = (uint)table["Value"];
            Value = ValueValue;
        }
    }
}
